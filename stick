package subumbo.game.physics
{
        import flash.display.Graphics;
        
        import subumbo.game.renderer.Renderable;
        
        public class VerletStick implements Renderable
        {
                private var _pointA:VerletPoint;
                private var _pointB:VerletPoint;
                private var _length:Number;
                private var _diff:Number;
                
                public function VerletStick(pointA:VerletPoint, pointB:VerletPoint, length:Number = -1)
                {
                        _pointA = pointA;
                        _pointB = pointB;
                        if(length == -1)
                        {
                                var dx:Number = _pointA.x - _pointB.x;
                                var dy:Number = _pointA.y - _pointB.y;
                                _length = Math.sqrt(dx * dx + dy * dy);
                        }
                        else
                        {
                                _length = length;
                        }
                }
                
                public function update():void
                {
                        var dx:Number = _pointB.x - _pointA.x;
                        var dy:Number = _pointB.y - _pointA.y;
                        var dist:Number = Math.sqrt(dx * dx + dy * dy);
                        var diff:Number = _length - dist;
                        var offsetX:Number = (diff * dx / dist) / 2;
                        var offsetY:Number = (diff * dy / dist) / 2;
                        _pointA.x -= offsetX;
                        _pointA.y -= offsetY;
                        _pointB.x += offsetX;
                        _pointB.y += offsetY;
                        _diff = diff;
                }
                
                public function render(g:Graphics):void
                {
                        g.lineStyle(0);
                        g.moveTo(_pointA.x, _pointA.y);
                        g.lineTo(_pointB.x, _pointB.y);
                }
                
                public function get x():Number
                {
                        return (_pointA.x + _pointB.x) * 0.5;
                }
                
                public function get y():Number
                {
                        return (_pointA.y + _pointB.y) * 0.5;
                }
                
                public function get rotation():Number
                {
                        return Math.atan2((_pointB.x -  _pointA.x) , (_pointA.y - _pointB.y) ) * 180 / Math.PI;
                }
                
                public function get length():Number
                {
                        return _length; 
                }
                
                public function get difference():Number
                {
                        return _diff;   
                }
                
        }
}
